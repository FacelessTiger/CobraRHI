#include <ImGuiBackend/imgui_impl_cobra.h>
#include <imgui.h>

#include "shaders/SharedShaderDefs.inl"

#include <array>

// include/ImGuiBackend/shaders/Imgui.slang
static constexpr auto SHADER_SPIRV = std::to_array<uint32_t>({
	0x00000380, 0x07230203, 0x00010500, 0x00000028, 0x0000006e, 0x00000000, 0x00020011, 0x0000115a,
	0x00020011, 0x000014e3, 0x00020011, 0x000014b6, 0x00020011, 0x000014b5, 0x00020011, 0x00000001,
	0x0008000a, 0x5f565053, 0x5f52484b, 0x69726176, 0x656c6261, 0x696f705f, 0x7265746e, 0x00000073,
	0x0009000a, 0x5f565053, 0x5f52484b, 0x73796870, 0x6c616369, 0x6f74735f, 0x65676172, 0x6675625f,
	0x00726566, 0x0006000b, 0x00000001, 0x4c534c47, 0x6474732e, 0x3035342e, 0x00000000, 0x0003000e,
	0x000014e4, 0x00000001, 0x000a000f, 0x00000000, 0x00000002, 0x6e69616d, 0x00000000, 0x00000003,
	0x00000004, 0x00000005, 0x00000006, 0x00000007, 0x000b000f, 0x00000004, 0x00000008, 0x6e69616d,
	0x00000000, 0x00000003, 0x00000009, 0x0000000a, 0x0000000b, 0x0000000c, 0x0000000d, 0x00030010,
	0x00000008, 0x00000007, 0x00030003, 0x0000000b, 0x00000001, 0x00060005, 0x0000000e, 0x74726556,
	0x754f7865, 0x74757074, 0x00000000, 0x00060006, 0x0000000e, 0x00000000, 0x69736f70, 0x6e6f6974,
	0x00000000, 0x00050006, 0x0000000e, 0x00000001, 0x6f6c6f63, 0x00000072, 0x00040006, 0x0000000e,
	0x00000002, 0x00007675, 0x00090005, 0x0000000f, 0x72626f43, 0x6d492e61, 0x48656761, 0x6c646e61,
	0x616e5f65, 0x61727574, 0x0000006c, 0x00050006, 0x0000000f, 0x00000000, 0x646e6168, 0x0000656c,
	0x00090005, 0x00000010, 0x75476d49, 0x6c532e69, 0x2e676e61, 0x68737550, 0x74616e5f, 0x6c617275,
	0x00000000, 0x00060006, 0x00000010, 0x00000000, 0x74726576, 0x73656369, 0x00000000, 0x00050006,
	0x00000010, 0x00000001, 0x6c616373, 0x00000065, 0x00060006, 0x00000010, 0x00000002, 0x6e617274,
	0x74616c73, 0x00000065, 0x00050006, 0x00000010, 0x00000003, 0x67616d69, 0x00000065, 0x00040005,
	0x00000003, 0x68737570, 0x00000000, 0x00090005, 0x00000011, 0x75476d49, 0x6c532e69, 0x2e676e61,
	0x74726556, 0x6e5f7865, 0x72757461, 0x00006c61, 0x00060006, 0x00000011, 0x00000000, 0x69736f70,
	0x6e6f6974, 0x00000000, 0x00040006, 0x00000011, 0x00000001, 0x00007675, 0x00050006, 0x00000011,
	0x00000002, 0x6f6c6f63, 0x00000072, 0x00040005, 0x00000012, 0x74726576, 0x00007865, 0x00070005,
	0x00000013, 0x75476d49, 0x6c532e69, 0x2e676e61, 0x74726556, 0x00007865, 0x00060006, 0x00000013,
	0x00000000, 0x69736f70, 0x6e6f6974, 0x00000000, 0x00040006, 0x00000013, 0x00000001, 0x00007675,
	0x00050006, 0x00000013, 0x00000002, 0x6f6c6f63, 0x00000072, 0x000b0005, 0x00000005, 0x72746e65,
	0x696f5079, 0x6150746e, 0x5f6d6172, 0x74726576, 0x614d7865, 0x632e6e69, 0x726f6c6f, 0x00000000,
	0x000a0005, 0x00000006, 0x72746e65, 0x696f5079, 0x6150746e, 0x5f6d6172, 0x74726576, 0x614d7865,
	0x752e6e69, 0x00000076, 0x00050005, 0x00000002, 0x74726576, 0x614d7865, 0x00006e69, 0x00070005,
	0x00000014, 0x72626f43, 0x6d492e61, 0x48656761, 0x6c646e61, 0x00000065, 0x00050006, 0x00000014,
	0x00000000, 0x646e6168, 0x0000656c, 0x00050005, 0x0000000c, 0x74726576, 0x752e7865, 0x00000076,
	0x00060005, 0x0000000d, 0x65545f67, 0x72757478, 0x61654865, 0x00000070, 0x00060005, 0x00000009,
	0x61535f67, 0x656c706d, 0x61654872, 0x00000070, 0x00060005, 0x0000000b, 0x74726576, 0x632e7865,
	0x726f6c6f, 0x00000000, 0x00090005, 0x0000000a, 0x72746e65, 0x696f5079, 0x6150746e, 0x5f6d6172,
	0x65786970, 0x69614d6c, 0x0000006e, 0x00050005, 0x00000008, 0x65786970, 0x69614d6c, 0x0000006e,
	0x00050048, 0x0000000e, 0x00000000, 0x00000023, 0x00000000, 0x00050048, 0x0000000e, 0x00000001,
	0x00000023, 0x00000010, 0x00050048, 0x0000000e, 0x00000002, 0x00000023, 0x00000020, 0x00040047,
	0x00000007, 0x0000000b, 0x0000002a, 0x00040047, 0x00000015, 0x00000006, 0x00000014, 0x00050048,
	0x0000000f, 0x00000000, 0x00000023, 0x00000000, 0x00030047, 0x00000010, 0x00000002, 0x00050048,
	0x00000010, 0x00000000, 0x00000023, 0x00000000, 0x00050048, 0x00000010, 0x00000001, 0x00000023,
	0x00000008, 0x00050048, 0x00000010, 0x00000002, 0x00000023, 0x00000010, 0x00050048, 0x00000010,
	0x00000003, 0x00000023, 0x00000018, 0x00050048, 0x00000011, 0x00000000, 0x00000023, 0x00000000,
	0x00050048, 0x00000011, 0x00000001, 0x00000023, 0x00000008, 0x00050048, 0x00000011, 0x00000002,
	0x00000023, 0x00000010, 0x00050048, 0x00000013, 0x00000000, 0x00000023, 0x00000000, 0x00050048,
	0x00000013, 0x00000001, 0x00000023, 0x00000008, 0x00050048, 0x00000013, 0x00000002, 0x00000023,
	0x00000010, 0x00040047, 0x00000004, 0x0000000b, 0x00000000, 0x00040047, 0x00000005, 0x0000001e,
	0x00000000, 0x00040047, 0x00000006, 0x0000001e, 0x00000001, 0x00050048, 0x00000014, 0x00000000,
	0x00000023, 0x00000000, 0x00040047, 0x0000000c, 0x0000001e, 0x00000001, 0x00040047, 0x00000016,
	0x00000006, 0x00000008, 0x00040047, 0x0000000d, 0x00000021, 0x00000002, 0x00040047, 0x0000000d,
	0x00000022, 0x00000000, 0x00040047, 0x00000017, 0x00000006, 0x00000008, 0x00040047, 0x00000009,
	0x00000021, 0x00000000, 0x00040047, 0x00000009, 0x00000022, 0x00000000, 0x00040047, 0x0000000b,
	0x0000001e, 0x00000000, 0x00040047, 0x0000000a, 0x0000001e, 0x00000000, 0x00030047, 0x00000018,
	0x000014b4, 0x00030047, 0x00000019, 0x000014b4, 0x00020013, 0x0000001a, 0x00030021, 0x0000001b,
	0x0000001a, 0x00030016, 0x0000001c, 0x00000020, 0x00040017, 0x0000001d, 0x0000001c, 0x00000004,
	0x00040017, 0x0000001e, 0x0000001c, 0x00000002, 0x0005001e, 0x0000000e, 0x0000001d, 0x0000001d,
	0x0000001e, 0x00040020, 0x0000001f, 0x00000007, 0x0000000e, 0x00040015, 0x00000020, 0x00000020,
	0x00000001, 0x00040020, 0x00000021, 0x00000001, 0x00000020, 0x00040015, 0x00000022, 0x00000020,
	0x00000000, 0x00030027, 0x00000015, 0x000014e5, 0x0003001e, 0x0000000f, 0x00000022, 0x0006001e,
	0x00000010, 0x00000015, 0x0000001e, 0x0000001e, 0x0000000f, 0x00040020, 0x00000023, 0x00000009,
	0x00000010, 0x0004002b, 0x00000020, 0x00000024, 0x00000000, 0x00040020, 0x00000025, 0x00000009,
	0x00000015, 0x0005001e, 0x00000011, 0x0000001e, 0x0000001e, 0x00000022, 0x0005001e, 0x00000013,
	0x0000001e, 0x0000001e, 0x00000022, 0x00040021, 0x00000026, 0x00000013, 0x00000011, 0x00040020,
	0x00000027, 0x00000007, 0x0000001d, 0x0004002b, 0x00000020, 0x00000028, 0x00000001, 0x00040020,
	0x00000029, 0x00000009, 0x0000001e, 0x0004002b, 0x00000020, 0x0000002a, 0x00000002, 0x0004002b,
	0x0000001c, 0x0000002b, 0x00000000, 0x0004002b, 0x0000001c, 0x0000002c, 0x3f800000, 0x00040020,
	0x0000002d, 0x00000007, 0x0000001e, 0x00040020, 0x0000002e, 0x00000007, 0x0000001c, 0x0004002b,
	0x0000001c, 0x0000002f, 0xbf800000, 0x00040020, 0x00000030, 0x00000003, 0x0000001d, 0x00040020,
	0x00000031, 0x00000003, 0x0000001e, 0x0004002b, 0x00000020, 0x00000032, 0x00000003, 0x00040020,
	0x00000033, 0x00000009, 0x0000000f, 0x0003001e, 0x00000014, 0x00000022, 0x00040021, 0x00000034,
	0x00000014, 0x0000000f, 0x00040020, 0x00000035, 0x00000001, 0x0000001e, 0x00050021, 0x00000036,
	0x0000001d, 0x00000014, 0x0000001e, 0x0004002b, 0x00000022, 0x00000037, 0x000fffff, 0x00090019,
	0x00000038, 0x0000001c, 0x00000001, 0x00000002, 0x00000000, 0x00000000, 0x00000001, 0x00000000,
	0x0003001d, 0x00000016, 0x00000038, 0x00040020, 0x00000039, 0x00000000, 0x00000016, 0x00040020,
	0x0000003a, 0x00000000, 0x00000038, 0x0004002b, 0x00000020, 0x0000003b, 0x00000014, 0x0002001a,
	0x0000003c, 0x0003001d, 0x00000017, 0x0000003c, 0x00040020, 0x0000003d, 0x00000000, 0x00000017,
	0x00040020, 0x0000003e, 0x00000000, 0x0000003c, 0x0003001b, 0x0000003f, 0x00000038, 0x00040020,
	0x00000040, 0x00000001, 0x0000001d, 0x00040020, 0x00000015, 0x000014e5, 0x00000011, 0x0004003b,
	0x00000021, 0x00000007, 0x00000001, 0x0004003b, 0x00000023, 0x00000003, 0x00000009, 0x0004003b,
	0x00000030, 0x00000004, 0x00000003, 0x0004003b, 0x00000030, 0x00000005, 0x00000003, 0x0004003b,
	0x00000031, 0x00000006, 0x00000003, 0x0004003b, 0x00000035, 0x0000000c, 0x00000001, 0x0004003b,
	0x00000039, 0x0000000d, 0x00000000, 0x0004003b, 0x0000003d, 0x00000009, 0x00000000, 0x0004003b,
	0x00000040, 0x0000000b, 0x00000001, 0x0004003b, 0x00000030, 0x0000000a, 0x00000003, 0x00040020,
	0x00000041, 0x00000007, 0x00000013, 0x00040020, 0x00000042, 0x00000007, 0x00000014, 0x00030001,
	0x0000001e, 0x00000043, 0x00030001, 0x00000022, 0x00000044, 0x00050036, 0x0000001a, 0x00000002,
	0x00000000, 0x0000001b, 0x000200f8, 0x00000045, 0x0004003b, 0x0000002d, 0x00000046, 0x00000007,
	0x0004003b, 0x00000027, 0x00000047, 0x00000007, 0x0004003b, 0x00000027, 0x00000048, 0x00000007,
	0x0004003d, 0x00000020, 0x00000049, 0x00000007, 0x0004007c, 0x00000022, 0x0000004a, 0x00000049,
	0x00050041, 0x00000025, 0x0000004b, 0x00000003, 0x00000024, 0x0004003d, 0x00000015, 0x0000004c,
	0x0000004b, 0x00050043, 0x00000015, 0x0000004d, 0x0000004c, 0x0000004a, 0x0006003d, 0x00000011,
	0x00000012, 0x0000004d, 0x00000002, 0x00000004, 0x00050051, 0x0000001e, 0x0000004e, 0x00000012,
	0x00000000, 0x00050051, 0x0000001e, 0x0000004f, 0x00000012, 0x00000001, 0x00050051, 0x00000022,
	0x00000050, 0x00000012, 0x00000002, 0x00060050, 0x00000013, 0x00000051, 0x0000004e, 0x0000004f,
	0x00000050, 0x00050041, 0x00000029, 0x00000052, 0x00000003, 0x00000028, 0x0004003d, 0x0000001e,
	0x00000053, 0x00000052, 0x00050085, 0x0000001e, 0x00000054, 0x0000004e, 0x00000053, 0x00050041,
	0x00000029, 0x00000055, 0x00000003, 0x0000002a, 0x0004003d, 0x0000001e, 0x00000056, 0x00000055,
	0x00050081, 0x0000001e, 0x00000057, 0x00000054, 0x00000056, 0x00060050, 0x0000001d, 0x00000058,
	0x00000057, 0x0000002b, 0x0000002c, 0x0003003e, 0x00000048, 0x00000058, 0x0006000c, 0x0000001d,
	0x00000059, 0x00000001, 0x00000040, 0x00000050, 0x0003003e, 0x00000047, 0x00000059, 0x0003003e,
	0x00000046, 0x0000004f, 0x00050041, 0x0000002e, 0x0000005a, 0x00000048, 0x00000028, 0x0004003d,
	0x0000001c, 0x0000005b, 0x0000005a, 0x00050085, 0x0000001c, 0x0000005c, 0x0000005b, 0x0000002f,
	0x0003003e, 0x0000005a, 0x0000005c, 0x0004003d, 0x0000001d, 0x0000005d, 0x00000048, 0x00060050,
	0x0000000e, 0x0000005e, 0x0000005d, 0x00000059, 0x0000004f, 0x0003003e, 0x00000004, 0x0000005d,
	0x0003003e, 0x00000005, 0x00000059, 0x0003003e, 0x00000006, 0x0000004f, 0x000100fd, 0x00010038,
	0x00050036, 0x0000001a, 0x00000008, 0x00000000, 0x0000001b, 0x000200f8, 0x0000005f, 0x0004003b,
	0x00000027, 0x00000060, 0x00000007, 0x00050041, 0x00000033, 0x00000061, 0x00000003, 0x00000032,
	0x0004003d, 0x0000000f, 0x00000062, 0x00000061, 0x00050051, 0x00000022, 0x00000063, 0x00000062,
	0x00000000, 0x00040050, 0x00000014, 0x00000064, 0x00000063, 0x0004003d, 0x0000001e, 0x00000065,
	0x0000000c, 0x000500c7, 0x00000022, 0x00000066, 0x00000063, 0x00000037, 0x00050041, 0x0000003a,
	0x00000067, 0x0000000d, 0x00000066, 0x0004003d, 0x00000038, 0x00000018, 0x00000067, 0x000500c2,
	0x00000022, 0x00000068, 0x00000063, 0x0000003b, 0x00050041, 0x0000003e, 0x00000069, 0x00000009,
	0x00000068, 0x0004003d, 0x0000003c, 0x00000019, 0x00000069, 0x00050056, 0x0000003f, 0x0000006a,
	0x00000018, 0x00000019, 0x00060057, 0x0000001d, 0x0000006b, 0x0000006a, 0x00000065, 0x00000000,
	0x0003003e, 0x00000060, 0x0000006b, 0x0004003d, 0x0000001d, 0x0000006c, 0x0000000b, 0x00050085,
	0x0000001d, 0x0000006d, 0x0000006c, 0x0000006b, 0x0003003e, 0x0000000a, 0x0000006d, 0x000100fd,
	0x00010038, 0x43425844, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x000015ec,
	0x00000006, 0x00000038, 0x00000048, 0x00000074, 0x00000174, 0x00000a9c, 0x00000ab8, 0x30494653,
	0x00000008, 0x06000000, 0x00000000, 0x53524556, 0x00000024, 0x00080001, 0x00000000, 0x0000119c,
	0x00000014, 0x61333632, 0x33333737, 0x382e3100, 0x342e302e, 0x00383035, 0x54414452, 0x000000f8,
	0x00000010, 0x00000004, 0x00000018, 0x00000040, 0x00000070, 0x000000e8, 0x00000001, 0x00000020,
	0x73757000, 0x00305f68, 0x74726576, 0x614d7865, 0x70006e69, 0x6c657869, 0x6e69614d, 0x00000000,
	0x00000003, 0x00000028, 0x00000001, 0x00000020, 0x00000002, 0x0000000d, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000004, 0x00000070, 0x00000002, 0x00000034,
	0x00000008, 0x00000008, 0x00000000, 0xffffffff, 0x00000001, 0x00000000, 0x00000000, 0x02000000,
	0x00000000, 0x00000002, 0x00010066, 0x00000000, 0xffffffff, 0x00000013, 0x00000013, 0x00000000,
	0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x06000000, 0x00000100, 0x00000001, 0x00000066,
	0x00000000, 0xffffffff, 0x00000002, 0x00000008, 0x00000001, 0x00000000, 0x54415453, 0x00000920,
	0x00060066, 0x00000248, 0x4c495844, 0x00000106, 0x00000010, 0x00000908, 0xdec04342, 0x00000c21,
	0x0000023f, 0x0020820b, 0x00000002, 0x00000013, 0x91238107, 0x4904c841, 0x39321006, 0x0c840192,
	0x19080525, 0x628b041e, 0x02451880, 0x420b9242, 0x143210c4, 0x4b180838, 0x8862320a, 0x20149048,
	0xa5884643, 0x42321900, 0x900e48e4, 0x50c42311, 0x8c815141, 0x8ae583e1, 0x06463104, 0x00001851,
	0x00000008, 0xffe08c1b, 0x07ffffff, 0x0da80240, 0xfffff084, 0x2003ffff, 0xff86306d, 0x1fffffff,
	0x00a80900, 0x00001849, 0x00000003, 0x42608213, 0x06084c20, 0x00000000, 0x00002089, 0x00000053,
	0x09882232, 0x04856420, 0x84a42313, 0xe3231304, 0x1490a184, 0x8c8c4c12, 0x4cc4840b, 0x1cc1b810,
	0x3dc04201, 0xd84fe5c3, 0x087e4843, 0xa042c334, 0x04612020, 0x150404a0, 0x50600473, 0x0e38e38c,
	0x066420e0, 0x71c418a0, 0x4b42801c, 0x38e39431, 0x399a8380, 0xc214a082, 0x410f3c71, 0x3f970d37,
	0xf9210f61, 0xc4ad212b, 0x8db717e4, 0x9451450a, 0x21d21ca3, 0xd070071c, 0xf970d374, 0x9210f613,
	0x4ad212bf, 0xdb723e4c, 0xe38e38a8, 0x1d51ca38, 0x070071c2, 0x0e918559, 0x45145041, 0x21438e39,
	0xf2e1a8ec, 0x2421ec27, 0x62a8db9f, 0xb91f2625, 0xc71c446d, 0x3b421471, 0xa3b68384, 0xb09fcb86,
	0x6e7c9087, 0x98958aa3, 0x11b6e2fc, 0x528a28a1, 0x0e10ee88, 0x2e1b6ef2, 0x421ec27f, 0x724257f2,
	0xd22048a8, 0x688879c8, 0x09090842, 0xe10851c7, 0xcb0a4010, 0x8d021c20, 0x08c30103, 0x348c71c2,
	0xf9309445, 0x34fd14e9, 0x0461cc0a, 0x9a4d3941, 0x7c984a22, 0xe02209ce, 0x20c01917, 0x1619a042,
	0x7051a7e2, 0x114d265c, 0xc8be4c25, 0xb3f21480, 0x7f18d00b, 0x4fc7494a, 0xd144e223, 0x92878cf4,
	0x81469f8e, 0x011ceb4a, 0x00000028, 0xc0721413, 0x87607487, 0x79876836, 0xc0720368, 0x50ae0d87,
	0x0ed06d0e, 0x6d0e507a, 0x307a0f00, 0x07a07207, 0x6d072073, 0xa0710e90, 0x07207307, 0x780e906d,
	0xd07807a0, 0x0710e906, 0x7107a076, 0x906d0760, 0x0720730e, 0x7207307a, 0x60e906d0, 0x07a07407,
	0x6d074076, 0x60710e60, 0x07107a07, 0xe606d076, 0xa0720730, 0x07207307, 0x760e606d, 0x607a0740,
	0x06d07407, 0x7a0780ee, 0xa0760710, 0x07207307, 0x7407607a, 0x0440f3a0, 0x02523219, 0x0003a004,
	0x10053c86, 0x00000000, 0x00000000, 0x0a790c00, 0x00000020, 0x00000000, 0xf2180000, 0x04004020,
	0x00000000, 0x30000000, 0x008059e4, 0x00000010, 0x00000000, 0x00d3c860, 0x00001001, 0x00000000,
	0x0790c000, 0x00200202, 0x00000000, 0x21800000, 0xc00404cf, 0x00000000, 0x00000000, 0x080b1e43,
	0x00000180, 0x00000000, 0x183c8600, 0x00030010, 0x00000000, 0x790c0000, 0x06002036, 0x00000000,
	0x18000000, 0x004078f2, 0x0000000c, 0x00000000, 0x0309e430, 0x00020020, 0x00000000, 0xf2180000,
	0x0010018c, 0x00000003, 0x00000000, 0x00008164, 0x00000015, 0x18981e32, 0x904c1119, 0x4726098c,
	0x024304c6, 0x0a0ca24a, 0x08a00461, 0x4a14a40a, 0x28128e80, 0x42801186, 0x2882832a, 0x8d289287,
	0x02902822, 0x2842852a, 0x280dc291, 0x100b6a0e, 0x83111010, 0x520019d2, 0x9d680067, 0x76d62001,
	0x0673a000, 0x00000000, 0x00001879, 0x000000c8, 0x904c031a, 0xc4130246, 0x1bc32031, 0x4b938143,
	0x2ba30bb3, 0x7189014b, 0x718171c1, 0xc181a9a1, 0xb1914101, 0xb9bb0999, 0x49a99999, 0x130410d9,
	0x209ac384, 0x6106d71c, 0x07082620, 0x0c3041b6, 0x62696c0e, 0x2084061b, 0xb06c0826, 0xeae03406,
	0x60bed0e6, 0xb6470826, 0xc5943101, 0xd8060630, 0x081b3410, 0x09807000, 0x01a41a82, 0x3932bb15,
	0xb2b1b4ba, 0x09982fb9, 0x206da1c2, 0x78324888, 0xb1858dcc, 0x4cc17d95, 0x826d8e10, 0x84137070,
	0x1c209ba3, 0xf8e104de, 0x25042036, 0x6585d655, 0xc2e4e85c, 0xc2d8e6dc, 0x60becae8, 0x18070826,
	0x4d88406c, 0xcb0bace2, 0x85b5a478, 0xc17d959d, 0x308e104c, 0x9e1040d8, 0x98286df4, 0x60c0eb49,
	0x6c067082, 0x8c2c8340, 0x660bec2e, 0xc1887082, 0x03188406, 0x00c8b0c9, 0x550836cb, 0xd2104c19,
	0x08260d00, 0x411018c7, 0x6323730b, 0xd982fb2b, 0x20691060, 0x6c191619, 0x0d40d010, 0xa06b0826,
	0x62081b06, 0x020d8c91, 0x121b06d3, 0x31030a03, 0x58338330, 0x83703603, 0x6c118209, 0x460c3600,
	0x86c1c41c, 0x08260e40, 0x18a1b086, 0xe80e60e0, 0x4c080e60, 0x0ce0da10, 0x1dc60836, 0x3b00286c,
	0x603c1e00, 0x57869702, 0x9614d6c6, 0xca65c6e6, 0x6dea0bea, 0xed2e8d2e, 0x00826dcd, 0xe0041338,
	0x131810d9, 0x209a0004, 0xc586d100, 0xe83e03d8, 0x83f83f03, 0x500c0fe1, 0x3d0c5800, 0x4d493d31,
	0xc3690010, 0x1f028832, 0x8c1f8280, 0x0307f0c2, 0xa8440028, 0x9e86b08a, 0x3688a49e, 0xf029592c,
	0xc1f82801, 0x90a30c28, 0x61b00281, 0x30520508, 0x56532605, 0x7261545f, 0x13746567, 0xb0da6004,
	0x07c0a818, 0xa007e0a9, 0x0181fc30, 0x4086c00a, 0xa70c3615, 0x06c00ab0, 0xc0c832a2, 0x7414360f,
	0x00ac07a0, 0xbb1502b4, 0x32ba3932, 0x34b0a6bc, 0x56532e37, 0x7265565f, 0x49786574, 0x80041344,
	0xd500209a, 0x8580c586, 0x3f059058, 0x16418500, 0x3600500c, 0x61b0b304, 0x005385a0, 0x40d51036,
	0xa1b07e06, 0xa8578380, 0x6816c005, 0x85bdb198, 0x104dcdd1, 0x9160320e, 0x374736e6, 0xca384137,
	0x1b9a4480, 0xb98d1cdd, 0x362fb3b4, 0x69731a32, 0x74735f67, 0x0cc38413, 0xe195d088, 0x85bdb17d,
	0x2ba11191, 0x7b72fbc3, 0x51636b93, 0x3746e697, 0x85c201b7, 0x5d85d05c, 0x17a205e0, 0x05f85f2c,
	0x70832070, 0xaaa1c418, 0xd766c6c2, 0x564692e6, 0x253746e6, 0xe190aa08, 0xc995d8b9, 0xb9bda5cd,
	0x2688094d, 0x762e7864, 0x65766c61, 0xa3025372, 0xcb9e190e, 0x59185a1c, 0x1bd35c99, 0x94db1959,
	0x86432900, 0x365722e7, 0x372756f7, 0x25373656, 0xe1912a70, 0xc1e5d0b9, 0xb9b90595, 0xd185d1bd,
	0xcdb9bda5, 0x80dc114d, 0xe190ea0e, 0xd1b994b9, 0xbd41e5c9, 0xcdd1b9a5, 0xa0f0194d, 0x0ba16c15,
	0xd8cb9e19, 0x5d1b9d5b, 0x94dcdc99, 0x00001c40, 0x00001879, 0x00000051, 0x1c800833, 0x661ce1c4,
	0x883d0114, 0xc3843843, 0x0780428c, 0x73077879, 0xe60c7198, 0x10ed0f00, 0x0e80f40e, 0x1e420c33,
	0xce1dc1c2, 0x30661ca1, 0x43883d05, 0x1b838438, 0xc83d03cc, 0x038c3d43, 0x8c78cc3d, 0x7b077074,
	0x48790708, 0x07707087, 0x7603707a, 0x20708778, 0x11cc1987, 0x0e90ec0e, 0x6e0f30e1, 0xf0e30f30,
	0x0e50f00e, 0x1dc41033, 0xd81c21de, 0x61c21d21, 0x8930661e, 0x3b83bc3b, 0xb43943d0, 0x83bc3c03,
	0x3b03843c, 0x7614f0cc, 0x687b0760, 0x87683707, 0x37076872, 0x90708780, 0x07607087, 0x76072876,
	0x787605f8, 0x87807787, 0x7187085f, 0x98728718, 0x81987987, 0x0ef0ee2c, 0xf50ee0ee, 0x30ec0ec0,
	0xa1c86203, 0x1ca1e41c, 0xe41ca1cc, 0x61dc1ca1, 0x1c21ca1c, 0xca1d81c4, 0x90d60661, 0x43c83943,
	0x39439839, 0xb83943c8, 0x439438c3, 0x3b038838, 0xbc2fc394, 0x82fc3c83, 0x3b03d43b, 0xc40cc3b0,
	0x707c0721, 0x87287a03, 0x19878076, 0xf80e43d1, 0x20e406e0, 0x06e0e70e, 0xf20e10f6, 0x90e10ec0,
	0x0f50ef0f, 0x81c330f4, 0xdc1f01c8, 0xc1de1dc0, 0x1dc1ea1d, 0xde1cc1d2, 0x01da1e41, 0x00002071,
	0x0000003e, 0x970d40c6, 0xd03e3cef, 0x4c04ce34, 0xc3340844, 0x36c2d842, 0xf8f3be5c, 0x05154042,
	0x300e9511, 0x08018494, 0xb6dc5f98, 0xe5c36c29, 0x042f8f3b, 0x51105154, 0x494300e9, 0xf9808018,
	0x035b6dc8, 0xef970c1a, 0x1110be3c, 0x408444c0, 0xe7c42c33, 0xf8122544, 0xd84fe5c3, 0x087e4843,
	0x9842c334, 0xbe5c3681, 0x4442f8f3, 0x02111300, 0x5f10b0cd, 0x012130e4, 0x0d30563c, 0xfe3cef97,
	0xd88300e2, 0x17e4d43c, 0xd3036db7, 0xe3cef970, 0x88300e2f, 0x3e4d43cd, 0x7076db72, 0x3cef970d,
	0x1b58047e, 0x54441455, 0x17e0c03a, 0xd7086db7, 0xe3cef970, 0x51b58047, 0xa5444145, 0x723e0c03,
	0x0d0096db, 0xbe3cef97, 0x42cf3004, 0x1b6dc5f8, 0xbe5c3541, 0xe4d2f8f3, 0x4d4a0444, 0xc5f9350f,
	0xf2409b6d, 0x98b11720, 0x8018d200, 0xf1d250f1, 0x54a016d3, 0x97113444, 0x000d2009, 0x00000000,
	0x48534148, 0x00000014, 0x00000000, 0xcb5d99bc, 0x0213cac6, 0xbbbac2b2, 0x4d0193d4, 0x4c495844,
	0x00000b2c, 0x00060066, 0x000002cb, 0x4c495844, 0x00000106, 0x00000010, 0x00000b14, 0xdec04342,
	0x00000c21, 0x000002c2, 0x0020820b, 0x00000002, 0x00000013, 0x91238107, 0x4904c841, 0x39321006,
	0x0c840192, 0x19080525, 0x628b041e, 0x02451880, 0x420b9242, 0x143210c4, 0x4b180838, 0x8862320a,
	0x20149048, 0xa5884643, 0x42321900, 0x900e48e4, 0x50c42311, 0x8c815141, 0x8ae583e1, 0x06463104,
	0x00001851, 0x00000008, 0xffe08c1b, 0x07ffffff, 0x0da80240, 0xfffff084, 0x2003ffff, 0xff86306d,
	0x1fffffff, 0x00a80900, 0x00001849, 0x00000003, 0x42608213, 0x06084c20, 0x00000000, 0x00002089,
	0x00000053, 0x09882232, 0x04856420, 0x84a42313, 0xe3231304, 0x1490a184, 0x8c8c4c12, 0x4cc4840b,
	0x1cc1b810, 0x3dc04201, 0xd84fe5c3, 0x087e4843, 0xa042c334, 0x04612020, 0x150404a0, 0x50600473,
	0x0e38e38c, 0x066420e0, 0x71c418a0, 0x4b42801c, 0x38e39431, 0x399a8380, 0xc214a082, 0x410f3c71,
	0x3f970d37, 0xf9210f61, 0xc4ad212b, 0x8db717e4, 0x9451450a, 0x21d21ca3, 0xd070071c, 0xf970d374,
	0x9210f613, 0x4ad212bf, 0xdb723e4c, 0xe38e38a8, 0x1d51ca38, 0x070071c2, 0x0e918559, 0x45145041,
	0x21438e39, 0xf2e1a8ec, 0x2421ec27, 0x62a8db9f, 0xb91f2625, 0xc71c446d, 0x3b421471, 0xa3b68384,
	0xb09fcb86, 0x6e7c9087, 0x98958aa3, 0x11b6e2fc, 0x528a28a1, 0x0e10ee88, 0x2e1b6ef2, 0x421ec27f,
	0x724257f2, 0xd22048a8, 0x688879c8, 0x09090842, 0xe10851c7, 0xcb0a4010, 0x8d021c20, 0x08c30103,
	0x348c71c2, 0xf9309445, 0x34fd14e9, 0x0461cc0a, 0x9a4d3941, 0x7c984a22, 0xe02209ce, 0x20c01917,
	0x1619a042, 0x7051a7e2, 0x114d265c, 0xc8be4c25, 0xb3f21480, 0x7f18d00b, 0x4fc7494a, 0xd144e223,
	0x92878cf4, 0x81469f8e, 0x011ceb4a, 0x00000028, 0xc0721413, 0x87607487, 0x79876836, 0xc0720368,
	0x50ae0d87, 0x0ed06d0e, 0x6d0e507a, 0x307a0f00, 0x07a07207, 0x6d072073, 0xa0710e90, 0x07207307,
	0x780e906d, 0xd07807a0, 0x0710e906, 0x7107a076, 0x906d0760, 0x0720730e, 0x7207307a, 0x60e906d0,
	0x07a07407, 0x6d074076, 0x60710e60, 0x07107a07, 0xe606d076, 0xa0720730, 0x07207307, 0x760e606d,
	0x607a0740, 0x06d07407, 0x7a0780ee, 0xa0760710, 0x07207307, 0x7407607a, 0x0440f3a0, 0x02523219,
	0x0003a004, 0x00053c86, 0x00000000, 0x00000000, 0x0a790c00, 0x00000000, 0x00000000, 0xf2180000,
	0x04004020, 0x00000000, 0x30000000, 0x008059e4, 0x00000010, 0x00000000, 0x00d3c860, 0x00001001,
	0x00000000, 0x0790c000, 0x00200202, 0x00000000, 0x21800000, 0xc00404cf, 0x00000000, 0x00000000,
	0x080b1e43, 0x00000180, 0x00000000, 0x183c8600, 0x00030010, 0x00000000, 0x790c0000, 0x06002036,
	0x00000000, 0x18000000, 0x004078f2, 0x0000000c, 0x00000000, 0x0309e430, 0x00020020, 0x00000000,
	0xf2180000, 0x0010018c, 0x00000003, 0x00000000, 0x00008164, 0x0000000e, 0x14981e32, 0x904c1119,
	0x4726098c, 0x024304c6, 0x0a0ca24a, 0x08a00461, 0x4a14a40a, 0x28128e80, 0x01188286, 0x2822a428,
	0x100b6a05, 0x83111010, 0x0001db58, 0x00000000, 0x00001879, 0x0000006e, 0x904c031a, 0xc4130246,
	0x1bc32031, 0x4b938143, 0x2ba30bb3, 0x7189014b, 0x718171c1, 0xc181a9a1, 0xb1914101, 0xb9bb0999,
	0x49a99999, 0x130410d9, 0x209ac384, 0x6106d71c, 0x07082620, 0x0c1841b6, 0x62696c0e, 0x2084061b,
	0x36470826, 0x8f036041, 0x1cdd5c06, 0x04cc17da, 0x2036d0e1, 0xca28c2ca, 0x021b00d0, 0x00010367,
	0x8260400f, 0x06dd06d0, 0x14369141, 0xd3400440, 0x9810c104, 0x95e1a5c0, 0xa58535b1, 0xb29971b9,
	0x9b7a82fa, 0x7b4ba34b, 0x00209b73, 0x780104ce, 0x04ca0436, 0x08268001, 0x5161b440, 0xb6d32c2e,
	0x80385361, 0xd313d0c5, 0x0104d493, 0x832c3690, 0x37da7187, 0x4c07036c, 0x088d8e10, 0xd0d61155,
	0xd11493d3, 0xc40c2586, 0x6fb4e300, 0x0380c2f8, 0x181d0c36, 0x2993018c, 0x30aa2fab, 0xba32b3b9,
	0x6d300209, 0xc0329458, 0x86e340cc, 0x0d80e14d, 0x186c19c1, 0x800d00c8, 0x6dc1c209, 0x0d450c20,
	0x65450db4, 0x06b001a5, 0xa0230413, 0x47265762, 0x14d78657, 0x65c6e696, 0xaacbeaca, 0x0cae8e4c,
	0x8268892f, 0x04135000, 0x28b0daa0, 0x7107006f, 0x1c4371a0, 0x21b01c28, 0xc30d8390, 0xb001901c,
	0x35063081, 0x6d1436d0, 0x007406e0, 0x361541d4, 0x9736bb36, 0x3732b234, 0x504129ba, 0xc5cf0c85,
	0x2e6e4cae, 0x4a6dcded, 0xc3213440, 0x630bb173, 0x9b932bb3, 0xc8751812, 0xd0e65cf0, 0xe4cac8c2,
	0xcac8de9a, 0x4804a6d8, 0x173c3219, 0xb7b9b2b9, 0xb2b1b93a, 0x53c129b9, 0xa5cf0c87, 0x2e4e8dcc,
	0xcd2dea0f, 0xca6e6e8d, 0x1d41ad30, 0x00000000, 0x00001879, 0x00000051, 0x1c800833, 0x661ce1c4,
	0x883d0114, 0xc3843843, 0x0780428c, 0x73077879, 0xe60c7198, 0x10ed0f00, 0x0e80f40e, 0x1e420c33,
	0xce1dc1c2, 0x30661ca1, 0x43883d05, 0x1b838438, 0xc83d03cc, 0x038c3d43, 0x8c78cc3d, 0x7b077074,
	0x48790708, 0x07707087, 0x7603707a, 0x20708778, 0x11cc1987, 0x0e90ec0e, 0x6e0f30e1, 0xf0e30f30,
	0x0e50f00e, 0x1dc41033, 0xd81c21de, 0x61c21d21, 0x8930661e, 0x3b83bc3b, 0xb43943d0, 0x83bc3c03,
	0x3b03843c, 0x7614f0cc, 0x687b0760, 0x87683707, 0x37076872, 0x90708780, 0x07607087, 0x76072876,
	0x787605f8, 0x87807787, 0x7187085f, 0x98728718, 0x81987987, 0x0ef0ee2c, 0xf50ee0ee, 0x30ec0ec0,
	0xa1c86203, 0x1ca1e41c, 0xe41ca1cc, 0x61dc1ca1, 0x1c21ca1c, 0xca1d81c4, 0x90d60661, 0x43c83943,
	0x39439839, 0xb83943c8, 0x439438c3, 0x3b038838, 0xbc2fc394, 0x82fc3c83, 0x3b03d43b, 0xc40cc3b0,
	0x707c0721, 0x87287a03, 0x19878076, 0xf80e43d1, 0x20e406e0, 0x06e0e70e, 0xf20e10f6, 0x90e10ec0,
	0x0f50ef0f, 0x81c330f4, 0xdc1f01c8, 0xc1de1dc0, 0x1dc1ea1d, 0xde1cc1d2, 0x01da1e41, 0x00002071,
	0x0000003e, 0x970d40c6, 0xd03e3cef, 0x4c04ce34, 0xc3340844, 0x36c2d842, 0xf8f3be5c, 0x05154042,
	0x300e9511, 0x08018494, 0xb6dc5f98, 0xe5c36c29, 0x042f8f3b, 0x51105154, 0x494300e9, 0xf9808018,
	0x035b6dc8, 0xef970c1a, 0x1110be3c, 0x408444c0, 0xe7c42c33, 0xf8122544, 0xd84fe5c3, 0x087e4843,
	0x9842c334, 0xbe5c3681, 0x4442f8f3, 0x02111300, 0x5f10b0cd, 0x012130e4, 0x0d30563c, 0xfe3cef97,
	0xd88300e2, 0x17e4d43c, 0xd3036db7, 0xe3cef970, 0x88300e2f, 0x3e4d43cd, 0x7076db72, 0x3cef970d,
	0x1b58047e, 0x54441455, 0x17e0c03a, 0xd7086db7, 0xe3cef970, 0x51b58047, 0xa5444145, 0x723e0c03,
	0x0d0096db, 0xbe3cef97, 0x42cf3004, 0x1b6dc5f8, 0xbe5c3541, 0xe4d2f8f3, 0x4d4a0444, 0xc5f9350f,
	0xf2409b6d, 0x98b11720, 0x8018d200, 0xf1d250f1, 0x54a016d3, 0x97113444, 0x000d2009, 0x00002061,
	0x00000088, 0x2c410413, 0x00000010, 0x00000011, 0x0cc21474, 0x940a5940, 0x140ff95d, 0x148140ec,
	0x146940b0, 0x145940ed, 0x0c14614a, 0x0230353d, 0xc008ca40, 0x82080118, 0x118dfe20, 0x82082080,
	0x104630a0, 0x77886092, 0x9c21ce04, 0x90873681, 0x00001906, 0x18c20754, 0x10003031, 0x48318304,
	0x31182803, 0x04100038, 0x83583083, 0x0c462029, 0xc1040012, 0xec83a900, 0x1b00cefb, 0x10003831,
	0x0ded8304, 0x460c012e, 0xc4600213, 0x10400100, 0x983aa00c, 0x3119c682, 0x04100038, 0x03803083,
	0x98aa402c, 0x08a13464, 0xc460102a, 0x10400140, 0xf83ca60c, 0xd60c0088, 0x13460c20, 0x3186c002,
	0x8188c100, 0x18208002, 0x06207c4c, 0x6e063047, 0x09a30640, 0x1b466001, 0x40c46080, 0x0c104001,
	0x03283fa6, 0x38833025, 0x84d18338, 0x03a4b000, 0x028188c1, 0x4c182080, 0x4d0680a2, 0xa0740690,
	0x0109a306, 0x80198c60, 0x0140c460, 0x2c0c1040, 0x28035852, 0x683b8360, 0x0084d183, 0x00383118,
	0x6f030410, 0xaae0d814, 0x4084d183, 0x06104d18, 0x98f92013, 0xc467c8e0, 0x104000e0, 0x88543c0c,
	0x460fae03, 0x34600213, 0x10ac0841, 0x008563e0, 0x40ea5a9f, 0x02ca502f, 0x394f9034, 0xe41580a3,
	0x94a05e81, 0x9f206c05, 0x2b00f492, 0x40bd03e8, 0x40e00b29, 0x01dd653e, 0x0594a05e, 0xab1f2073,
	0x233e2783, 0x82000906, 0xc38cb060, 0x2b82b82a, 0x623442d8, 0x08200090, 0xac38cb06, 0x82b82b82,
	0x0623042c, 0x60820009, 0x2ac38cb0, 0xd42b82b8, 0x188c1e02, 0x82080024, 0xab0e32c1, 0x80ae0ae0,
	0x6230770b, 0x08200090, 0xac38cb06, 0x82b82c42, 0x0623342d, 0x60820009, 0x2ac38cb0, 0xc82b82c4,
	0x90623242, 0x06082000, 0x42ac38cb, 0x2d42b82c, 0x09062314, 0xb0608200, 0xc42ac38c, 0x82e02b82,
	0x00906230, 0xcb060820, 0x2b02ac38, 0x802d82b8, 0x024188c1, 0x2c182080, 0xac0ab0e3, 0xd0b20ae0,
	0x00000021, 0x00002061, 0x00000058, 0x2c410413, 0x00000010, 0x0000000d, 0x1400cc74, 0x140ec142,
	0x0b0140ed, 0x95d94694, 0x495fffff, 0x714a1442, 0x233d1e14, 0xca403500, 0x7381000c, 0xcda06408,
	0x30676c21, 0x19069087, 0x00000000, 0x18c20714, 0x10003031, 0x28318304, 0x31182783, 0x04100038,
	0x03383083, 0x0c462829, 0xc1040012, 0x2a0379a0, 0x1aa0c6db, 0x10004831, 0x0e068304, 0x03038d2a,
	0x0120c46b, 0x9a0c1040, 0xa0c0b038, 0xc46b832b, 0x10400120, 0xb8391a0c, 0x0313c0c2, 0x0120c46c,
	0x9a0c1040, 0xe0c4c039, 0xc46c8333, 0x10400120, 0xc83a1a0c, 0xd40c00c6, 0x38311b40, 0x83041000,
	0xe3aa0e0d, 0x80084d1b, 0x311d2c0a, 0x04100040, 0xb60ee803, 0x0c468a40, 0xc104000e, 0xa0e40c20,
	0x2e229e0b, 0x0040311c, 0x48030410, 0xa280bc0f, 0x000e0c46, 0x0c20c104, 0x820c00ea, 0x01e0c468,
	0xb00c1040, 0xc088c03c, 0x0d2aaa69, 0xaa0c60d2, 0x180084d1, 0xd182104d, 0x4d184184, 0x22230620,
	0xc91118f9, 0x3e4888c7, 0x19f24446, 0x10004831, 0x14e58304, 0xe40e40de, 0x11880f40, 0x41000483,
	0xe14e5830, 0x0e40e40d, 0x311860ec, 0x04100048, 0xde14e583, 0x20e40e40, 0x8311840f, 0x30410004,
	0x0de14e58, 0xf80e40e4, 0x00004020, 0x00000000
});

struct ImGui_ImplCobra_FrameRenderBuffers
{
	std::unique_ptr<Cobra::Buffer> VertexBuffer = nullptr;
	std::unique_ptr<Cobra::Buffer> IndexBuffer = nullptr;
};

struct ImGui_ImplCobra_WindowRenderBuffers
{
	uint32_t Index;
	uint32_t Count;
	std::vector<ImGui_ImplCobra_FrameRenderBuffers> FrameRenderBuffers;
};

struct ImGui_ImplCobraH_Window
{
	std::unique_ptr<Cobra::Swapchain> Swapchain;
	Cobra::SyncPoint SyncPoint[2];

	uint32_t FrameIndex = 0;
	bool ClearEnable;
};

struct ImGui_ImplCobra_ViewportData
{
	ImGui_ImplCobraH_Window Window; // Used by secondary viewports only
	ImGui_ImplCobra_WindowRenderBuffers RenderBuffers; // Used by all viewports
	bool WindowOwned = false;

	ImGui_ImplCobra_ViewportData() { memset(&RenderBuffers, 0, sizeof(RenderBuffers)); }
};

struct ImGui_ImplCobra_Data
{
	ImGui_ImplCobra_InitInfo CobraInitInfo;

	std::unique_ptr<Cobra::Sampler> FontSampler;
	std::unique_ptr<Cobra::Image> FontImage;
	std::unique_ptr<Cobra::Shader> Shader;
};

static ImGui_ImplCobra_Data* ImGui_ImplCobra_GetBackendData()
{
	return ImGui::GetCurrentContext() ? (ImGui_ImplCobra_Data*)ImGui::GetIO().BackendRendererUserData : nullptr;
}

static void ImGui_ImplCobra_CreateWindow(ImGuiViewport* viewport)
{
	ImGui_ImplCobra_Data* bd = ImGui_ImplCobra_GetBackendData();
	ImGui_ImplCobra_ViewportData* vd = IM_NEW(ImGui_ImplCobra_ViewportData)();
	viewport->RendererUserData = vd;
	ImGui_ImplCobraH_Window* wd = &vd->Window;
	ImGui_ImplCobra_InitInfo* v = &bd->CobraInitInfo;

	wd->Swapchain = std::make_unique<Cobra::Swapchain>(*v->Context, Platform_GetNativeWindow(viewport), Cobra::uVec2{(uint32_t)viewport->Size.x, (uint32_t)viewport->Size.y}, false);
	wd->ClearEnable = (viewport->Flags & ImGuiViewportFlags_NoRendererClear) ? false : true;
	vd->WindowOwned = true;
}

static void ImGui_ImplCobra_DestroyWindow(ImGuiViewport* viewport)
{
	// The main viewport (owned by the application) will always have RendererUserData == 0 since we didn't create the data for it.
	ImGui_ImplCobra_Data* bd = ImGui_ImplCobra_GetBackendData();
	ImGui_ImplCobra_ViewportData* vd = (ImGui_ImplCobra_ViewportData*)viewport->RendererUserData;

	if (vd)
	{
		ImGui_ImplCobra_InitInfo* v = &bd->CobraInitInfo;
		IM_DELETE(vd);
	}

	viewport->RendererUserData = nullptr;
}

static void ImGui_ImplCobra_SetWindowSize(ImGuiViewport* viewport, ImVec2 size)
{
	ImGui_ImplCobra_Data* bd = ImGui_ImplCobra_GetBackendData();
	ImGui_ImplCobra_ViewportData* vd = (ImGui_ImplCobra_ViewportData*)viewport->RendererUserData;

	if (!vd) // Nullptr for the main viewport (users responsibility)
		return;

	ImGui_ImplCobraH_Window* wd = &vd->Window;
	Cobra::Swapchain& swapchain = *wd->Swapchain.get();
	swapchain.Resize({ (uint32_t)size.x, (uint32_t)size.y });
}

static void ImGui_ImplCobra_RenderWindow(ImGuiViewport* viewport, void*)
{
	ImGui_ImplCobra_Data* bd = ImGui_ImplCobra_GetBackendData();
	ImGui_ImplCobra_ViewportData* vd = (ImGui_ImplCobra_ViewportData*)viewport->RendererUserData;
	ImGui_ImplCobraH_Window* wd = &vd->Window;
	ImGui_ImplCobra_InitInfo* v = &bd->CobraInitInfo;

	Cobra::Swapchain& swapchain = *wd->Swapchain.get();
	Cobra::Queue& queue = *v->Queue;

	wd->FrameIndex = (wd->FrameIndex + 1) % 2;
	wd->SyncPoint[wd->FrameIndex].Wait();
	queue.Acquire(swapchain);

	auto cmd = queue.Begin();
	cmd.BeginRendering(swapchain.GetSize(), { swapchain.GetCurrent() });
	if (wd->ClearEnable)
		cmd.ClearColorAttachment(0, Cobra::Vec4{ 0.0f, 0.0f, 0.0f, 1.0f }, swapchain.GetSize());
	ImGui_ImplCobra_RenderDrawData(viewport->DrawData, cmd);
	cmd.EndRendering();

	cmd.Present(swapchain);
	wd->SyncPoint[wd->FrameIndex] = queue.Submit(cmd, {});
	queue.Present(swapchain, {});
}

bool ImGui_ImplCobra_CreateDeviceObjects()
{
	ImGui_ImplCobra_Data* bd = ImGui_ImplCobra_GetBackendData();
	ImGui_ImplCobra_InitInfo* v = &bd->CobraInitInfo;

	if (!bd->FontSampler)
		bd->FontSampler = std::make_unique<Cobra::Sampler>(*v->Context, Cobra::Filter::Linear, Cobra::Filter::Linear);

	bd->Shader = std::make_unique<Cobra::Shader>(*v->Context, SHADER_SPIRV, Cobra::ShaderStage::Vertex | Cobra::ShaderStage::Pixel);
	return true;
}

void ImGui_ImplCobra_InitPlatformInterface()
{
	ImGuiPlatformIO& platformIO = ImGui::GetPlatformIO();
	platformIO.Renderer_CreateWindow = ImGui_ImplCobra_CreateWindow;
	platformIO.Renderer_DestroyWindow = ImGui_ImplCobra_DestroyWindow;
	platformIO.Renderer_SetWindowSize = ImGui_ImplCobra_SetWindowSize;
	platformIO.Renderer_RenderWindow = ImGui_ImplCobra_RenderWindow;
	//platformIO.Renderer_SwapBuffers = [](ImGuiViewport* viewport, void*) {};
}

bool ImGui_ImplCobra_Init(ImGui_ImplCobra_InitInfo* info)
{
	ImGuiIO& io = ImGui::GetIO();
	IMGUI_CHECKVERSION();
	IM_ASSERT(io.BackendRendererUserData == nullptr && "Already initialized a renderer backend!");

	ImGui_ImplCobra_Data* bd = IM_NEW(ImGui_ImplCobra_Data);
	io.BackendRendererUserData = bd;
	io.BackendRendererName = "imgui_impl_cobra";
	io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset;
	io.BackendFlags |= ImGuiBackendFlags_RendererHasViewports;

	bd->CobraInitInfo = *info;
	ImGui_ImplCobra_CreateDeviceObjects();

	ImGuiViewport* mainViewport = ImGui::GetMainViewport();
	mainViewport->RendererUserData = IM_NEW(ImGui_ImplCobra_ViewportData)();

	if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable)
		ImGui_ImplCobra_InitPlatformInterface();

	return true;
}

bool ImGui_ImplCobra_CreateFontsTexture()
{
	ImGuiIO& io = ImGui::GetIO();
	ImGui_ImplCobra_Data* bd = ImGui_ImplCobra_GetBackendData();
	ImGui_ImplCobra_InitInfo* v = &bd->CobraInitInfo;

	unsigned char* pixels;
	int width, height;
	io.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height);

	bd->FontImage = std::make_unique<Cobra::Image>(*v->Context, Cobra::uVec2 { (uint32_t)width, (uint32_t)height }, Cobra::ImageFormat::R8G8B8A8_UNORM, Cobra::ImageUsage::Sampled | Cobra::ImageUsage::TransferDst);
	bd->FontImage->SetDebugName("Imgui font image");
	bd->FontImage->Set(pixels);
	bd->FontImage->Transition(Cobra::ImageLayout::ReadOnlyOptimal);
	
	io.Fonts->SetTexID((ImTextureID)(uint64_t)bd->FontImage->GetHandle());
	return true;
}

void ImGui_ImplCobra_NewFrame()
{
	ImGui_ImplCobra_Data* bd = ImGui_ImplCobra_GetBackendData();
	IM_ASSERT(bd != nullptr && "Context or backend not initialized! Did you call ImGui_ImplCobra_Init()?");

	if (!bd->FontImage)
		ImGui_ImplCobra_CreateFontsTexture();
}

void ImGui_ImplCobra_RenderDrawData(ImDrawData* drawData, Cobra::CommandList& cmd)
{
	int fbWidth = (int)(drawData->DisplaySize.x * drawData->FramebufferScale.x);
	int fbHeight = (int)(drawData->DisplaySize.y * drawData->FramebufferScale.y);
	if (fbWidth <= 0 || fbHeight <= 0) return;
	if (drawData->TotalVtxCount <= 0) return;

	ImGui_ImplCobra_Data* bd = ImGui_ImplCobra_GetBackendData();
	ImGui_ImplCobra_InitInfo* v = &bd->CobraInitInfo;

	ImGui_ImplCobra_ViewportData* viewportRendererData = (ImGui_ImplCobra_ViewportData*)drawData->OwnerViewport->RendererUserData;
	ImGui_ImplCobra_WindowRenderBuffers* wrb = &viewportRendererData->RenderBuffers;

	if (wrb->FrameRenderBuffers.empty())
	{
		wrb->Index = 0;
		wrb->Count = 2;

		wrb->FrameRenderBuffers.resize(wrb->Count);
		memset(wrb->FrameRenderBuffers.data(), 0, sizeof(ImGui_ImplCobra_FrameRenderBuffers) * wrb->Count);
	}

	wrb->Index = (wrb->Index + 1) % wrb->Count;
	ImGui_ImplCobra_FrameRenderBuffers* rb = &wrb->FrameRenderBuffers[wrb->Index];

	size_t vertexSize = drawData->TotalVtxCount * sizeof(ImDrawVert);
	size_t indexSize = drawData->TotalIdxCount * sizeof(ImDrawIdx);

	if (!rb->VertexBuffer || rb->VertexBuffer->GetSize() < vertexSize)
		rb->VertexBuffer = std::make_unique<Cobra::Buffer>(*v->Context, vertexSize, Cobra::BufferUsage::StorageBuffer, Cobra::BufferFlags::Mapped);
	if (!rb->IndexBuffer || rb->IndexBuffer->GetSize() < indexSize)
		rb->IndexBuffer = std::make_unique<Cobra::Buffer>(*v->Context, indexSize, Cobra::BufferUsage::IndexBuffer, Cobra::BufferFlags::Mapped);

	ImDrawVert* vtxDst = (ImDrawVert*)rb->VertexBuffer->GetHostAddress();
	ImDrawIdx* idxDst = (ImDrawIdx*)rb->IndexBuffer->GetHostAddress();

	for (int n = 0; n < drawData->CmdListsCount; n++)
	{
		const ImDrawList* cmdList = drawData->CmdLists[n];
		memcpy(vtxDst, cmdList->VtxBuffer.Data, cmdList->VtxBuffer.Size * sizeof(ImDrawVert));
		memcpy(idxDst, cmdList->IdxBuffer.Data, cmdList->IdxBuffer.Size * sizeof(ImDrawIdx));

		vtxDst += cmdList->VtxBuffer.Size;
		idxDst += cmdList->IdxBuffer.Size;
	}

	cmd.SetDefaultState();
	cmd.SetViewport({ fbWidth, fbHeight });
	cmd.EnableColorBlend(Cobra::BlendFactor::SrcAlpha, Cobra::BlendFactor::OneMinusSrcAlpha, Cobra::BlendOp::Add, Cobra::BlendFactor::One, Cobra::BlendFactor::Zero, Cobra::BlendOp::Add);
	cmd.BindIndexBuffer(*rb->IndexBuffer, sizeof(ImDrawIdx) == sizeof(uint16_t) ? Cobra::IndexType::Uint16 : Cobra::IndexType::Uint32);
	cmd.BindShaders({ *bd->Shader });

	Cobra::Vec2 scale = { 2.0f / drawData->DisplaySize.x, 2.0f / drawData->DisplaySize.y };
	Cobra::Vec2 translate = { -1.0f - drawData->DisplayPos.x * scale.x, -1.0f - drawData->DisplayPos.y * scale.y };

	ImVec2 clipOff = drawData->DisplayPos;
	ImVec2 clipScale = drawData->FramebufferScale;

	int globalVtxOffset = 0;
	int globalIdxOffset = 0;
	for (int n = 0; n < drawData->CmdListsCount; n++)
	{
		const ImDrawList* cmdList = drawData->CmdLists[n];
		for (int cmdi = 0; cmdi < cmdList->CmdBuffer.Size; cmdi++)
		{
			const ImDrawCmd* pcmd = &cmdList->CmdBuffer[cmdi];
			
			// Project scissor/clipping rectangles into framebuffer space
			ImVec2 clip_min((pcmd->ClipRect.x - clipOff.x) * clipScale.x, (pcmd->ClipRect.y - clipOff.y) * clipScale.y);
			ImVec2 clip_max((pcmd->ClipRect.z - clipOff.x) * clipScale.x, (pcmd->ClipRect.w - clipOff.y) * clipScale.y);

			// Clamp to viewport as vkCmdSetScissor() won't accept values that are off bounds
			if (clip_min.x < 0.0f) { clip_min.x = 0.0f; }
			if (clip_min.y < 0.0f) { clip_min.y = 0.0f; }
			if (clip_max.x > fbWidth) { clip_max.x = (float)fbWidth; }
			if (clip_max.y > fbHeight) { clip_max.y = (float)fbHeight; }
			if (clip_max.x <= clip_min.x || clip_max.y <= clip_min.y)
				continue;

			cmd.SetScissor({ int32_t(clip_max.x - clip_min.x), int32_t(clip_max.y - clip_min.y) }, { int32_t(clip_min.x), int32_t(clip_min.y) });
			cmd.PushConstant(ImGui::Slang::Push {
				.vertices = rb->VertexBuffer->GetDeviceAddress(),
				.scale = scale,
				.translate = translate,
				.image = { (uint32_t)(uint64_t)pcmd->TextureId, bd->FontSampler->GetHandle() }
			});
			cmd.DrawIndexed(pcmd->ElemCount, 1, pcmd->IdxOffset + globalIdxOffset, pcmd->VtxOffset + globalVtxOffset, 0);
		}

		globalVtxOffset += cmdList->VtxBuffer.Size;
		globalIdxOffset += cmdList->IdxBuffer.Size;
	}
}

void ImGui_ImplCobra_Shutdown()
{
	ImGui_ImplCobra_Data* bd = ImGui_ImplCobra_GetBackendData();
	IM_ASSERT(bd != nullptr && "No renderer backend to shutdown, or already shutdown?");
	ImGuiIO& io = ImGui::GetIO();
	ImGuiPlatformIO& platformIO = ImGui::GetPlatformIO();

	ImGuiViewport* mainViewport = ImGui::GetMainViewport();
	ImGui_ImplCobra_ViewportData* vd = (ImGui_ImplCobra_ViewportData*)mainViewport->RendererUserData;
	if (vd)
		IM_DELETE(vd);
	mainViewport->RendererUserData = nullptr;

	ImGui::DestroyPlatformWindows();

	io.BackendRendererName = nullptr;
	io.BackendRendererUserData = nullptr;
	io.BackendFlags &= ~(ImGuiBackendFlags_RendererHasVtxOffset | ImGuiBackendFlags_RendererHasViewports);
	IM_DELETE(bd);
}